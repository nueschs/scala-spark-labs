{"paragraphs":[{"text":"%md\n### Linear Regression Consulting Project\n\nCongratulations! You've been contracted by MegaShips Inc. to help them build a predictive model for some ships. \nThe company is one of the world's largest ship manufacturing companies, building ships for cruise lines all over the globe.\n\nYou've been flown to their headquarters in South Korea to help them give accurate estimates of how many crew members a ship will require.\n\nThey are currently building new ships for some customers and want you to create a model and use it to predict how many crew members the ships will need.\n\n    Description:\n    Measurements of ship size, capacity, crew, and age for 158 cruise ships.\n\n    Columns:\n    - Ship Name\n    - Cruise Line\n    - Age (as of 2013)\n    - Tonnage (1000s of tons)\n    - passengers (100s) \n    - Length (100s of feet)\n    - Cabins (100s)\n    - Passenger Density\n    - Crew (100s)\n\n    \nIt is saved in a csv file for you called \"cruise_ship_info.csv\". Your job is to create a regression model that will help predict how many crew members will be needed for future ships. The client also mentioned that they have found that particular cruise lines will differ in acceptable crew counts, so it is most likely an important feature to include in your analysis! ","user":"admin","dateUpdated":"2019-02-14T14:36:09+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Linear Regression Consulting Project</h3>\n<p>Congratulations! You've been contracted by MegaShips Inc. to help them build a predictive model for some ships.\n<br  />The company is one of the world's largest ship manufacturing companies, building ships for cruise lines all over the globe.</p>\n<p>You've been flown to their headquarters in South Korea to help them give accurate estimates of how many crew members a ship will require.</p>\n<p>They are currently building new ships for some customers and want you to create a model and use it to predict how many crew members the ships will need.</p>\n<pre><code>Description:\nMeasurements of ship size, capacity, crew, and age for 158 cruise ships.\n\nColumns:\n- Ship Name\n- Cruise Line\n- Age (as of 2013)\n- Tonnage (1000s of tons)\n- passengers (100s) \n- Length (100s of feet)\n- Cabins (100s)\n- Passenger Density\n- Crew (100s)\n</code></pre>\n<p>It is saved in a csv file for you called &ldquo;cruise_ship_info.csv&rdquo;. Your job is to create a regression model that will help predict how many crew members will be needed for future ships. The client also mentioned that they have found that particular cruise lines will differ in acceptable crew counts, so it is most likely an important feature to include in your analysis!</p>\n"}]},"apps":[],"jobName":"paragraph_1550154969741_465650421","id":"20190207-182151_738768424","dateCreated":"2019-02-14T14:36:09+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:246"},{"text":"%md\n#### What the Spark?! Basics Steps To Be Done\n\nThe steps that have to be done are the following:\n1. Read in data\n2. Transform the features you want in your model to adequate numerical values. \n3. Create an array with two columns that you need to train your model: features (= combination of ship properties), outputs (= crew)\n4. Train a linear regression model\n5. Measure your linear regression model\n6. If you only use 1 single ship property in your model (= 2D-case), you can also plot your model results at the end.\n\nThe paragraphs below guide you through these steps. Have fun!","user":"admin","dateUpdated":"2019-02-14T15:17:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>What the Spark?! Basics Steps To Be Done</h4>\n<p>The steps that have to be done are the following:</p>\n<ol>\n<li>Read in data</li>\n<li>Transform the features you want in your model to adequate numerical values.</li>\n<li>Create an array with two columns that you need to train your model: features (= combination of ship properties), outputs (= crew)</li>\n<li>Train a linear regression model</li>\n<li>Measure your linear regression model</li>\n<li>If you only use 1 single ship property in your model (= 2D-case), you can also plot your model results at the end.</li>\n</ol>\n<p>The paragraphs below guide you through these steps. Have fun!</p>\n"}]},"apps":[],"jobName":"paragraph_1550154969746_-289048874","id":"20190209-165339_1745856037","dateCreated":"2019-02-14T14:36:09+0000","dateStarted":"2019-02-14T15:17:12+0000","dateFinished":"2019-02-14T15:17:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:247"},{"title":"Read In Data","text":"// the data lies under \"/user/zeppelin/cruise_ship_info.csv\", read it into a DataFrame\n\nval df = (spark\n    .read\n    .option(\"header\", ???)\n    .option(\"inferSchema\", ???) // you do not specify this, all columns will be treated as strings (also the ones with numbers in it)\n    .csv(???))\n","user":"admin","dateUpdated":"2019-02-14T14:47:38+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1550154969746_1079693508","id":"20190207-173253_2065410112","dateCreated":"2019-02-14T14:36:09+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:248"},{"title":"Explore the Data","text":"// explore your data to understand what it looks like\n// Spark DataFrames provides some handy methods like show, printSchema, describe, ... \n\n// examples:\n\n//df.printSchema()\n//df.show()\n//df.describe(df.columns:_*).show() // scala syntax to directly describe all columns... you could also print a single one with `df.describe(\"Age\").show()`)\n","user":"admin","dateUpdated":"2019-02-14T14:36:09+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1550154969746_904094850","id":"20190207-190435_1358868229","dateCreated":"2019-02-14T14:36:09+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:249"},{"title":"Build a (Categorical) Index Column from a String Column","text":"// your client mentioned that crew numbers heavily depend on cruise lines, right?\n// so it probably makes sense to include that column into your features\n\n// the column seems to contain a defined set of names though – to use it in linear regression, \n// you have to convert it to numbers and then tread it as a categorical column\n\n// remember the course slides on that topic – for Spark, StringIndexer and OneHotEncoderEstimator might be useful\n\nimport org.apache.spark.ml.feature.StringIndexer\nimport org.apache.spark.ml.feature.OneHotEncoderEstimator\n\nval indexer = (new StringIndexer()\n  .setInputCol(???)\n  .setOutputCol(???))\n  \nval encoder = (new OneHotEncoderEstimator()\n  .setInputCols(Array(???))\n  .setOutputCols(Array(???)))\n  \nval indexed = indexer.fit(df).transform(df)\nval encoded = encoder.fit(indexed).transform(indexed)\n\nencoded.show()","user":"admin","dateUpdated":"2019-02-14T14:56:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1550154969747_-1992821277","id":"20190207-184507_1750906671","dateCreated":"2019-02-14T14:36:09+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:250"},{"title":"Build Feature Vector of Columns to Use in Model","text":"// your initial data has *a lot* of columns. choose the ones you want to include in your model and assemble\n// them into one single feature column. the Spark VectorAssembler might be useful\n\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.feature.VectorAssembler\n\nindexed.columns\n\nval assembler = (new VectorAssembler()\n    .setInputCols(Array(\"Age\")) // you can set a better set of features here\n    .setOutputCol(???)) // TODO: what should be in here?\n    \nval output = assembler.transform(???)\n","user":"admin","dateUpdated":"2019-02-14T14:52:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1550154969747_1153962645","id":"20190207-192245_1759718855","dateCreated":"2019-02-14T14:36:09+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:251"},{"title":"Build Final Feature Vector to Use in Model","text":"// to train your model, you only need the features and the label (= value you want to predict)\r\n// select these two and store them in a variable\r\n\r\nval final_data = output.???// TODO: what should be in here?\r\n\r\nfinal_data.show","user":"admin","dateUpdated":"2019-02-14T14:51:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1550154969747_1599363880","id":"20190207-193023_1528883980","dateCreated":"2019-02-14T14:36:09+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:252"},{"title":"Build and Fit a Model","text":"// with the DataFrame containing features and labels, we can now fit our linear regression model\n// things needed are `LinearRegression`, its' method `fit` and then `evaluate` from the fitted model\n\n// from the model object, we can then directly read out the linear regression model parameters\n// from the summary object returned by `evaluate`, you can get the mean square error (MSE)\n\nimport org.apache.spark.ml.regression.LinearRegression\n\nval lr = new LinearRegression().setLabelCol(???) // TODO: set the column that contains your label (= the thing you want to predict) \nval lrModel = lr.fit(???) // TODO: fit a model on your DataFrame that contains only the features and the labels\n\nprintln(\"Coefficients: \" + lrModel.coefficients) // the model parameters corresponding to the features you selected\nprintln(\"Intercept: \" + lrModel.intercept) // the intercept model parameter (\"shift from zero\")\n\nval test_results = lrModel.evaluate(???) // TODO: evaluate the model on your data frame that only contains the features and the labels\n\nprintln(\"MSE: \" + test_results.meanSquaredError)\n\ntest_results.predictions.show() // have a look at what your model produced!\n","user":"admin","dateUpdated":"2019-02-14T14:53:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1550154969747_-673002270","id":"20190207-193906_1709856092","dateCreated":"2019-02-14T14:36:09+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:253"},{"text":"%md\n\n#### Plotting data in Zeppelin through Matplotlib\n\nA convenient way to plot in Zeppelin notebooks is through the python library Matplotlib.\nSince all our code is in Scala and hence handled by the Scala interpreter (%spark), we need to pass the data we want to plot to the python environment.\n\nThis is done through the ZeppelinContext: you first push your data from Scala:\n`z.put(\"some_name\", your_variable)`\n\nand then pull it in PySpark from the ZeppelinContext:\n`z.get(\"some_name\")`\n\nCaution: Before being able to pass the data into the plotting function, you need to convert the rows of the DataFrame to a valid python arrays that contain your X and Y values that you want to plot.\nThis looks something like\n`dataFrameRows = dataframe.collect()`\n`rowValuesAsList = [float(row.columnName) for row in dataFrameRows]`\n\nBelow is the complete code skeleton to help you out with all of that – have fun!","user":"admin","dateUpdated":"2019-02-14T14:36:09+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Plotting data in Zeppelin through Matplotlib</h4>\n<p>A convenient way to plot in Zeppelin notebooks is through the python library Matplotlib.\n<br  />Since all our code is in Scala and hence handled by the Scala interpreter (%spark), we need to pass the data we want to plot to the python environment.</p>\n<p>This is done through the ZeppelinContext: you first push your data from Scala:\n<br  /><code>z.put(\"some_name\", your_variable)</code></p>\n<p>and then pull it in PySpark from the ZeppelinContext:\n<br  /><code>z.get(\"some_name\")</code></p>\n<p>Caution: Before being able to pass the data into the plotting function, you need to convert the rows of the DataFrame to a valid python arrays that contain your X and Y values that you want to plot.\n<br  />This looks something like\n<br  /><code>dataFrameRows = dataframe.collect()</code>\n<br  /><code>rowValuesAsList = [float(row.columnName) for row in dataFrameRows]</code></p>\n<p>Below is the complete code skeleton to help you out with all of that – have fun!</p>\n"}]},"apps":[],"jobName":"paragraph_1550154969747_1477564987","id":"20190211-192548_619875563","dateCreated":"2019-02-14T14:36:09+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:254"},{"title":"Putting Variables to ZeppelinContext","text":"z.put(\"predictions\", test_results.predictions)\nz.put(\"coefficients\", lrModel.coefficients)\nz.put(\"intercept\", lrModel.intercept)\nz.put(\"firstFeatureName\", assembler.getInputCols(0))","user":"admin","dateUpdated":"2019-02-14T14:36:09+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1550154969749_-1167111797","id":"20190211-191058_1462495409","dateCreated":"2019-02-14T14:36:09+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:255"},{"title":"Plotting the Results with Python / PySpark","text":"%pyspark\n\nimport matplotlib.pyplot as plt\nfrom pyspark.sql import DataFrame\n\n# just for initialization purposes, to make sure there's no other plot active\nplt.close()\n\n# tell zepplin to leave the plot open, to be able to draw multiple things inside one plot\nz.configure_mpl(angular=True, close=False)\n\n# normal variables can be pulled directly\ncoefficients = z.get(\"coefficients\")  \nintercept = z.get(\"intercept\")\nfirstFeatureName = z.get(\"firstFeatureName\")\n\n# if you want to get a DataFrame from ZeppelinContext, you need to put it into a DataFrame constructor\npredictions = DataFrame(z.get(\"predictions\"), sqlContext).orderBy(\"features\")\n\n# converting DataFrame rows to actual python arrays\npredictionsRows = predictions.collect()\nfeaturesList = [float(row.features[0]) for row in predictionsRows] # note that this takes only the FIRST value of your feature in each row, hence the [0] in row.features[0] \npredictionsList = [float(row.prediction) for row in predictionsRows]\ncrewList = [float(row.crew) for row in predictionsRows]\n\n# plot the true crew values\nplt.plot(featuresList, crewList, \"rx\", label=\"true crew values\")\n\n# plot your crew model linear regression line\nplt.plot(featuresList, predictionsList, \"b\", label=\"prediction\")\n\n# give the plot proper axis labels and a legend\nplt.xlabel(firstFeatureName)\nplt.ylabel(\"crew\")\nplt.legend(loc=\"upper right\")","user":"admin","dateUpdated":"2019-02-14T14:54:11+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1550154969749_-228081456","id":"20190209-162117_866167688","dateCreated":"2019-02-14T14:36:09+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:256"}],"name":"Day4_ML_Labs/LinearRegression/LinearRegression_Easy","id":"2E5FMAVTW","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"jdbc:shared_process":[],"spark2:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}
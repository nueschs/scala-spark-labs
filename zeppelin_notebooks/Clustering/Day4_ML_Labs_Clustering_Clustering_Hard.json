{"paragraphs":[{"text":"%md\n## Clustering of Seed Data\n\nIn this lab, you have a data set of seeds. Each entry contains properties about some seed like length, width, compactness, etc.\nUnfortunately, you do not know which of the seed is from which plant (i.e. there is no label for that in the data).\n\nHere's a sneak peek at the data (file is located under *\"/user/zeppelin/seeds_dataset.csv\"*):\n\n    area,perimeter,compactness,length_of_kernel,width_of_kernel,asymmetry_coefficient,length_of_groove\n    15.26,14.84,0.871,5.763,3.312,2.221,5.22\n    14.88,14.57,0.8811,5.553999999999999,3.333,1.018,4.956\n    14.29,14.09,0.905,5.291,3.3369999999999997,2.699,4.825\n\nHaving no lables about the plants, you would still like to analyse how many different types of seed there are in the data.\nBuild a pipeline that does k-means and use the elbow method to find a reasonable amount of clusters!\n\n### Pipeline components to implement\nImplement the following components:\n1. Read in data\n2. Assemble available features\n3. Normalize features\n4. Cluster with k-means for a fixed number of clusters, e.g. 5\n5. Evaluate k-means by computing distortion (sum of squared means from cluster centroids)\n\n### Elbow method to find best k\nAs soon as your pipeline works for a fixed number of clusters, find the best value for k with the elbow method.\nA simple way to do that would be:\n- Build a loop around steps 4 & 5 above to run it for different values of k (e.g. 2 to 10)\n- Append a tuple (k, cost) to a list in each step of the iteration\n- Transform the list to a DataFrame, register it as SQL table and plot the curve with the built in Zeppelin SQL visualizer\n\n### Optional: Comparing regular k-Means and hierarchical k-Means version\nSince plant families can themselves be modeled as hierarchical structures, it might be a good idea to also cluster their seeds hierarchically.\nThere is a hierarchical version of the k-means algorithm, called bisecting k-means. It works by splitting the data into clusters in a top-down approach\n(starting with all points in one cluster and splitting it up into more clusters consecutively).\n\nBuild a second pipeline that uses the same normalized features and clusters them with bisecting k-means.\nCalculate the cost for different values of k, plot it and compare it with the regular k-means algorithm. Does it make any difference?","user":"admin","dateUpdated":"2019-02-13T17:21:45+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Clustering of Seed Data</h2>\n<p>In this lab, you have a data set of seeds. Each entry contains properties about some seed like length, width, compactness, etc.\n<br  />Unfortunately, you do not know which of the seed is from which plant (i.e. there is no label for that in the data).</p>\n<p>Here's a sneak peek at the data (file is located under <em>&ldquo;/user/zeppelin/seeds_dataset.csv&rdquo;</em>):</p>\n<pre><code>area,perimeter,compactness,length_of_kernel,width_of_kernel,asymmetry_coefficient,length_of_groove\n15.26,14.84,0.871,5.763,3.312,2.221,5.22\n14.88,14.57,0.8811,5.553999999999999,3.333,1.018,4.956\n14.29,14.09,0.905,5.291,3.3369999999999997,2.699,4.825\n</code></pre>\n<p>Having no lables about the plants, you would still like to analyse how many different types of seed there are in the data.\n<br  />Build a pipeline that does k-means and use the elbow method to find a reasonable amount of clusters!</p>\n<h3>Pipeline components to implement</h3>\n<p>Implement the following components:</p>\n<ol>\n<li>Read in data</li>\n<li>Assemble available features</li>\n<li>Normalize features</li>\n<li>Cluster with k-means for a fixed number of clusters, e.g. 5</li>\n<li>Evaluate k-means by computing distortion (sum of squared means from cluster centroids)</li>\n</ol>\n<h3>Elbow method to find best k</h3>\n<p>As soon as your pipeline works for a fixed number of clusters, find the best value for k with the elbow method.\n<br  />A simple way to do that would be:</p>\n<ul>\n<li>Build a loop around steps 4 &amp; 5 above to run it for different values of k (e.g. 2 to 10)</li>\n<li>Append a tuple (k, cost) to a list in each step of the iteration</li>\n<li>Transform the list to a DataFrame, register it as SQL table and plot the curve with the built in Zeppelin SQL visualizer</li>\n</ul>\n<h3>Optional: Comparing regular k-Means and hierarchical k-Means version</h3>\n<p>Since plant families can themselves be modeled as hierarchical structures, it might be a good idea to also cluster their seeds hierarchically.\n<br  />There is a hierarchical version of the k-means algorithm, called bisecting k-means. It works by splitting the data into clusters in a top-down approach\n<br  />(starting with all points in one cluster and splitting it up into more clusters consecutively).</p>\n<p>Build a second pipeline that uses the same normalized features and clusters them with bisecting k-means.\n<br  />Calculate the cost for different values of k, plot it and compare it with the regular k-means algorithm. Does it make any difference?</p>\n"}]},"apps":[],"jobName":"paragraph_1550078505410_812096701","id":"20190213-082259_722661528","dateCreated":"2019-02-13T17:21:45+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:55088"},{"title":"Your Implementation","text":"// as a little help, we provide you with all the needed imports here \n// with these, the Spark API reference and the task description on top, you should now be able to do the whole thing yourself - good luck! :-)\n\nimport org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.ml.feature.{VectorAssembler, StandardScaler}\nimport org.apache.spark.ml.clustering.{KMeans, KMeansModel, BisectingKMeans, BisectingKMeansModel}\n\n???\n","user":"admin","dateUpdated":"2019-02-13T17:24:25+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1550078505411_1629364158","id":"20190213-121642_789654883","dateCreated":"2019-02-13T17:21:45+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:55090"}],"name":"Day4_ML_Labs/Clustering/Clustering_Hard","id":"2E48A6YS8","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"jdbc:shared_process":[],"spark2:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}